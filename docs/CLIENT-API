
WhoisOnline Client API
======================

This API is based on simple HTTP GET/POST requests and HTTP GET long polling requests.

The session handling is based on cookies. To prevent session hijacking and password sniffing
the client should always use https. 

To reduce the risk of session cookie theft the cookie should be set with "; Secure; HttpOnly"
(or ";HttpOnly" in case of nonHTTPS) to prevent javascript code to sniff session information.
[RFC6265].

If the commando includes data from the client the HTTP request looks like this
	POST /clientapi/<cmd>
and the client data ist sent as POST data in JSON format. The HTTP response
should be a normal "200 OK" response, and include the data in JSON format.

If the commando doesn't need any data from the client the HTTP request looks like this
	GET /clientapi/<cmd>
The HTTP response should be a normal "200 OK" response, and include the data in JSON format.

In case of server problems the server may return other result codes like 404, 500, ..
The client should handle these results well, and retry gracefully or inform the user that the 
connection to the server failed.

If the server does not known the cmd or the cmd is missing, it must return the JSON
object with resultcode 404  (eg: { result:404, data: 'unknown command'} ) 

PreAuth Phase
-------------

 - Login:
	POST /clientapi/login 
	Data: username, password
	Returns: result, msg

	The username must be in the format "username@domain" like in the email standards
	[RFC821,RFC822,RFC5321,RFC5322] or "username" without domain. 
	if the User ommits the domain part the server may still try to authenticate the
	user based on the server's local domain name(s).

	Msg must be a string explaining the resultcode. The client may show this msg, especially
	if it has no translation for the result code.

	Resultcodes: 
	    200 authentication succeeded 
		this response must include a "Set-Cookie" header that includes the session cookie.
	    401 username or password wrong
	    429 too many attempts in the last timeframe
	    500 internal servere error

Authenticted Phase
------------------

In this phase the user is already authenticated and every request must include a session cookie set
during PreAuth phase.  If the session cookie is missing, invalid or expired the server must return
"authentication needed"  ( eg: "{ result:401, data: 'authentication needed'}" )

 - Poll for updates: The client has to poll constantly for new messages and changes. The Server
	must delay the response to this request until it has to send new messages or changes to 
	the client or until a timeout is reached. The timeout has to be between 10 and 20 seconds.
	The client should also drop the connection if it receives no data for more than 25 seconds.
	The reason for this timeout is that the network between client and server may have dropped
	the connection in the meantime (eg: nat firewall reboot, wlan reconnect, etc). If the
	connection to the the server fails, or the server response with an result code other
	than 200 (OK). The client must wait at least 1 second to reconnect to server. The client
	should increase this retransmit intervall if the server repeatedly fails to responde 
	with result 200.

	GET /clientapi/poll
	Return: result, [data], [retry_after]

        Resultcodes:
            200 OK
	    204 I am bored
	    503 Service Unavailable. Please retry later

	In case of 200 data must include one or more objects of new messages.
	If the timeout occured the server must return resultcode 204 (data is optional). 
	If the server is overloaded and wants the client to wait it may return
	503. In this case the attribute "retry_after" must be returned which
	holds the number of seconds to wait until the client should retry the poll request.

	Examples:
		{ result:200, data:[{ <new message> }, { <new messages> }] }
		{ result:204, data:"I am bored" }
		{ result:503, retry_after: 30 }
	
 - Get user profile:
	GET /clientapi/profile/<username>
	Return: result, data : profile (JSON)

	Resultcodes:
	    200 OK
	    403 Not allowed
	    404 User not found

	If a user hides her profile, the server may return ether 403 or 404.
	If <username> is "me", the profile of the requesting user is returned
	
 - Get get_conversations:
	GET /clientapi/get_conversations[?skipto=<n>]
	Return: result, data : list of conversations (JSON)

	Resultcodes:
	    200 OK

	The server must return all active conversations ordered by last use date descending.
	If the list of conversations is long the server may response with a partial list 
	and add "more" as last list element. The client may request additional conversations
	by adding "?skipto=n" to the request, with "n" beeing the id of the last list element, 
	which the client already received.

 - Get startup infos:
	GET /clientapi/start
	Return: result, username, now, 
		OPTIONAL fullname, user gui prefs

	Resultcodes:
		200 OK

	"Username" is in <user>@<domain> format. 
	"Now" is a javascript Date() object.

	"User gui prefs" is an object which was sent by the client before, the server
	should return it unchanged.

 - Start conversation:
	POST /clientapi/start_conversation

	TODO

 - Search for users:
	GET /clientapi/search_user

	TODO

 - Logout
	GET /clientapi/logout
	Return: result, msg
	
	Resultcodes:
		200 OK

JSON object structures 
----------------------

 - Profile
 	TODO

 - List of conversations
	TODO

